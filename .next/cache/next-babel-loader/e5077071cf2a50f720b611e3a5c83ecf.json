{"ast":null,"code":"import React, { useState, useEffect, useMemo } from \"react\";\nimport { MOBILE_WIDTH_SIZE_PX } from \"../constants/constants\";\nexport function useIsMobile() {\n  const {\n    0: isMobile,\n    1: setIsMobile\n  } = useState(false);\n\n  const handleResize = () => {\n    if (window.innerWidth <= MOBILE_WIDTH_SIZE_PX) {\n      setIsMobile(true);\n    } else {\n      setIsMobile(false);\n    }\n  };\n\n  useEffect(() => {\n    handleResize();\n  }, []);\n  useEffect(() => {\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n  const isMobileMemo = useMemo(() => {\n    return isMobile;\n  }, [isMobile]);\n  return {\n    isMobile: isMobileMemo\n  };\n}","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/trip_map_staging/src/Hooks/useIsMobile.js"],"names":["React","useState","useEffect","useMemo","MOBILE_WIDTH_SIZE_PX","useIsMobile","isMobile","setIsMobile","handleResize","window","innerWidth","addEventListener","removeEventListener","isMobileMemo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BN,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMO,YAAY,GAAG,MAAM;AACzB,QAAIC,MAAM,CAACC,UAAP,IAAqBN,oBAAzB,EAA+C;AAC7CG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GAND;;AAQAL,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY;AAEZC,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC;AACD,KAFD;AAGD,GAPQ,CAAT;AASA,QAAMK,YAAY,GAAGV,OAAO,CAAC,MAAM;AACjC,WAAOG,QAAP;AACD,GAF2B,EAEzB,CAACA,QAAD,CAFyB,CAA5B;AAIA,SAAO;AAAEA,IAAAA,QAAQ,EAAEO;AAAZ,GAAP;AACD","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport { MOBILE_WIDTH_SIZE_PX } from \"../constants/constants\";\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState(false);\n\n  const handleResize = () => {\n    if (window.innerWidth <= MOBILE_WIDTH_SIZE_PX) {\n      setIsMobile(true);\n    } else {\n      setIsMobile(false);\n    }\n  };\n\n  useEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    handleResize();\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  const isMobileMemo = useMemo(() => {\n    return isMobile;\n  }, [isMobile]);\n\n  return { isMobile: isMobileMemo };\n}\n"]},"metadata":{},"sourceType":"module"}