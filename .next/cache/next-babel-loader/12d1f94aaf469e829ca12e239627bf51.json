{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar promise = null;\n\nvar resetPendingPromise = function resetPendingPromise() {\n  promise = null;\n};\n\nvar getLazyUploader = function getLazyUploader(getResult, getPromise) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            result = getResult();\n\n            if (!result) {\n              _context.next = 5;\n              break;\n            }\n\n            promise = null;\n            console.log(\"Giving him saved result\");\n            return _context.abrupt(\"return\", result);\n\n          case 5:\n            if (!promise) {\n              _context.next = 8;\n              break;\n            }\n\n            console.log(\"Giving him pending promise\");\n            return _context.abrupt(\"return\", promise);\n\n          case 8:\n            promise = getPromise();\n            console.log(\"Setting getPromise\");\n            return _context.abrupt(\"return\", promise);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nmodule.exports = {\n  getLazyUploader: getLazyUploader,\n  resetPendingPromise: resetPendingPromise\n};","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/trip_map_staging/src/Lib/getLazyUploader.js"],"names":["promise","resetPendingPromise","getLazyUploader","getResult","getPromise","result","console","log","module","exports"],"mappings":";;;;AAAA,IAAIA,OAAO,GAAG,IAAd;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChCD,EAAAA,OAAO,GAAG,IAAV;AACD,CAFD;;AAIA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD,EAAYC,UAAZ,EAA2B;AACjD,+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,MADD,GACUF,SAAS,EADnB;;AAAA,iBAGDE,MAHC;AAAA;AAAA;AAAA;;AAIHL,YAAAA,OAAO,GAAG,IAAV;AACAM,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AALG,6CAOIF,MAPJ;;AAAA;AAAA,iBAUDL,OAVC;AAAA;AAAA;AAAA;;AAWHM,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAXG,6CAYIP,OAZJ;;AAAA;AAeLA,YAAAA,OAAO,GAAGI,UAAU,EAApB;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAhBK,6CAiBEP,OAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAmBD,CApBD;;AAsBAQ,MAAM,CAACC,OAAP,GAAiB;AACfP,EAAAA,eAAe,EAAfA,eADe;AAEfD,EAAAA,mBAAmB,EAAnBA;AAFe,CAAjB","sourcesContent":["let promise = null;\n\nconst resetPendingPromise = () => {\n  promise = null;\n};\n\nconst getLazyUploader = (getResult, getPromise) => {\n  return async () => {\n    const result = getResult();\n\n    if (result) {\n      promise = null;\n      console.log(\"Giving him saved result\");\n\n      return result;\n    }\n\n    if (promise) {\n      console.log(\"Giving him pending promise\");\n      return promise;\n    }\n\n    promise = getPromise();\n    console.log(\"Setting getPromise\");\n    return promise;\n  };\n};\n\nmodule.exports = {\n  getLazyUploader,\n  resetPendingPromise,\n};\n"]},"metadata":{},"sourceType":"script"}