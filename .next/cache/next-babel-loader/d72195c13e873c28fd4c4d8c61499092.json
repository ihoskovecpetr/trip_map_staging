{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst uuid = require(\"uuid\");\n\nconst mongoose = require(\"mongoose\");\n\nconst axios = require(\"axios\");\n\nconst Big = require(\"big.js\");\n\nconst {\n  getShippingRateCZ\n} = require(\"./Lib/getShippingRateCZ\");\n\nconst {\n  getCurrencyRateToCZK\n} = require(\"./Lib/getCurrencyRateToCZK\");\n\nconst {\n  TAXES_KOEFICIENT,\n  MARKUP_KOEFICIENT\n} = require(\"../../constants/constants\");\n\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      const axiosConfig = {\n        headers: {\n          Authorization: `Basic ${process.env.AUTH_KEY_PRINTFUL}`,\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      };\n      const {\n        variantIdsArr\n      } = req.body;\n      const promises = variantIdsArr.map(variantId => axios.get(`https://api.printful.com/products/variant/${variantId}`, axiosConfig));\n      const promisesShipping = variantIdsArr.map(variantId => getShippingRateCZ(variantId)); //TODO: is there way how to query all in one request?\n\n      const responses = await Promise.all(promises);\n      const responsesShip = await Promise.all(promisesShipping);\n      const exchangeRateUSDtoCZK = await getCurrencyRateToCZK({\n        currency: \"USD\"\n      });\n      const finalResult = responses.reduce((acc, cur) => {\n        const priceUSD = new Big(cur.data.result.variant.price);\n        const priceCZK = priceUSD.times(exchangeRateUSDtoCZK).times(TAXES_KOEFICIENT).times(MARKUP_KOEFICIENT).div(10).add(1).round(0).times(10).toString();\n        const shippingVariantObj = responsesShip.find(item => item.variantId === cur.data.result.variant.id);\n        const availableEU = cur.data.result.variant.availability_status.find(({\n          region\n        }) => region === \"EU\").status === \"in_stock\";\n        return _objectSpread(_objectSpread({}, acc), {}, {\n          [cur.data.result.variant.id]: {\n            price: priceCZK,\n            url: cur.data.result.variant.image,\n            currency: \"CZK\",\n            availableEU: availableEU,\n            shipping: shippingVariantObj\n          }\n        });\n      }, {});\n      res.status(200).json({\n        finalResult\n      });\n      break;\n\n    default:\n      res.status(405).end(); //Method Not Allowed\n\n      break;\n  }\n});","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/trip_map_staging/src/pages/api/data-printful.js"],"names":["uuid","require","mongoose","axios","Big","getShippingRateCZ","getCurrencyRateToCZK","TAXES_KOEFICIENT","MARKUP_KOEFICIENT","req","res","method","axiosConfig","headers","Authorization","process","env","AUTH_KEY_PRINTFUL","variantIdsArr","body","promises","map","variantId","get","promisesShipping","responses","Promise","all","responsesShip","exchangeRateUSDtoCZK","currency","finalResult","reduce","acc","cur","priceUSD","data","result","variant","price","priceCZK","times","div","add","round","toString","shippingVariantObj","find","item","id","availableEU","availability_status","region","status","url","image","shipping","json","end"],"mappings":"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","sourcesContent":["const uuid = require(\"uuid\");\nconst mongoose = require(\"mongoose\");\nconst axios = require(\"axios\");\nconst Big = require(\"big.js\");\n\nconst { getShippingRateCZ } = require(\"./Lib/getShippingRateCZ\");\nconst { getCurrencyRateToCZK } = require(\"./Lib/getCurrencyRateToCZK\");\n\nconst {\n  TAXES_KOEFICIENT,\n  MARKUP_KOEFICIENT,\n} = require(\"../../constants/constants\");\n\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      const axiosConfig = {\n        headers: {\n          Authorization: `Basic ${process.env.AUTH_KEY_PRINTFUL}`,\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      };\n\n      const { variantIdsArr } = req.body;\n\n      const promises = variantIdsArr.map((variantId) =>\n        axios.get(\n          `https://api.printful.com/products/variant/${variantId}`,\n          axiosConfig\n        )\n      );\n\n      const promisesShipping = variantIdsArr.map((variantId) =>\n        getShippingRateCZ(variantId)\n      ); //TODO: is there way how to query all in one request?\n\n      const responses = await Promise.all(promises);\n      const responsesShip = await Promise.all(promisesShipping);\n\n      const exchangeRateUSDtoCZK = await getCurrencyRateToCZK({\n        currency: \"USD\",\n      });\n\n      const finalResult = responses.reduce((acc, cur) => {\n        const priceUSD = new Big(cur.data.result.variant.price);\n        const priceCZK = priceUSD\n          .times(exchangeRateUSDtoCZK)\n          .times(TAXES_KOEFICIENT)\n          .times(MARKUP_KOEFICIENT)\n          .div(10)\n          .add(1)\n          .round(0)\n          .times(10)\n          .toString();\n\n        const shippingVariantObj = responsesShip.find(\n          (item) => item.variantId === cur.data.result.variant.id\n        );\n\n        const availableEU =\n          cur.data.result.variant.availability_status.find(\n            ({ region }) => region === \"EU\"\n          ).status === \"in_stock\";\n\n        return {\n          ...acc,\n          [cur.data.result.variant.id]: {\n            price: priceCZK,\n            url: cur.data.result.variant.image,\n            currency: \"CZK\",\n            availableEU: availableEU,\n            shipping: shippingVariantObj,\n          },\n        };\n      }, {});\n\n      res.status(200).json({\n        finalResult,\n      });\n\n      break;\n    default:\n      res.status(405).end(); //Method Not Allowed\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}