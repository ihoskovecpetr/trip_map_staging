{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst Schema = mongoose.Schema;\nconst OrderScehma = new Schema({\n  sessionId: {\n    type: String\n  },\n  clientProductObj: {\n    type: Object\n  },\n  imageObj: {\n    type: Object\n  },\n  payer_name: {\n    type: String\n  },\n  payer_address: {\n    type: String\n  },\n  payer_zip_code: {\n    type: String\n  },\n  payer_email: {\n    type: String\n  },\n  delivery_address_obj: {\n    type: Object\n  },\n  delivery_name: {\n    type: String\n  },\n  delivery_address: {\n    type: String\n  },\n  delivery_zip_code: {\n    type: String\n  },\n  map_url: {\n    type: String\n  },\n  map_image_obj: {\n    type: Object\n  },\n  map_width: {\n    type: Number\n  },\n  map_height: {\n    type: Number\n  },\n  price: {\n    type: Number\n  },\n  idempotencyKey: {\n    type: String\n  },\n  order_state: {\n    type: String\n  }\n}, {\n  timestamps: true\n});\nOrderScehma.index({\n  geometry: \"2dsphere\",\n  name: \"text\",\n  address: \"text\",\n  description: \"text\"\n}, {\n  weights: {\n    name: 2,\n    address: 1,\n    description: 1\n  }\n});\nmodule.exports = mongoose.models.orders || mongoose.model(\"orders\", OrderScehma);","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/trip_map_staging/src/mongoModels/order.js"],"names":["mongoose","require","Schema","OrderScehma","sessionId","type","String","clientProductObj","Object","imageObj","payer_name","payer_address","payer_zip_code","payer_email","delivery_address_obj","delivery_name","delivery_address","delivery_zip_code","map_url","map_image_obj","map_width","Number","map_height","price","idempotencyKey","order_state","timestamps","index","geometry","name","address","description","weights","module","exports","models","orders","model"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAxB;AAEA,MAAMC,WAAW,GAAG,IAAID,MAAJ,CAClB;AACEE,EAAAA,SAAS,EAAE;AAAEC,IAAAA,IAAI,EAAEC;AAAR,GADb;AAEEC,EAAAA,gBAAgB,EAAE;AAAEF,IAAAA,IAAI,EAAEG;AAAR,GAFpB;AAGEC,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEG;AAAR,GAHZ;AAKEE,EAAAA,UAAU,EAAE;AAAEL,IAAAA,IAAI,EAAEC;AAAR,GALd;AAMEK,EAAAA,aAAa,EAAE;AAAEN,IAAAA,IAAI,EAAEC;AAAR,GANjB;AAOEM,EAAAA,cAAc,EAAE;AAAEP,IAAAA,IAAI,EAAEC;AAAR,GAPlB;AAQEO,EAAAA,WAAW,EAAE;AAAER,IAAAA,IAAI,EAAEC;AAAR,GARf;AASEQ,EAAAA,oBAAoB,EAAE;AAAET,IAAAA,IAAI,EAAEG;AAAR,GATxB;AAUEO,EAAAA,aAAa,EAAE;AAAEV,IAAAA,IAAI,EAAEC;AAAR,GAVjB;AAWEU,EAAAA,gBAAgB,EAAE;AAAEX,IAAAA,IAAI,EAAEC;AAAR,GAXpB;AAYEW,EAAAA,iBAAiB,EAAE;AAAEZ,IAAAA,IAAI,EAAEC;AAAR,GAZrB;AAaEY,EAAAA,OAAO,EAAE;AAAEb,IAAAA,IAAI,EAAEC;AAAR,GAbX;AAcEa,EAAAA,aAAa,EAAE;AAAEd,IAAAA,IAAI,EAAEG;AAAR,GAdjB;AAeEY,EAAAA,SAAS,EAAE;AAAEf,IAAAA,IAAI,EAAEgB;AAAR,GAfb;AAgBEC,EAAAA,UAAU,EAAE;AAAEjB,IAAAA,IAAI,EAAEgB;AAAR,GAhBd;AAiBEE,EAAAA,KAAK,EAAE;AAAElB,IAAAA,IAAI,EAAEgB;AAAR,GAjBT;AAkBEG,EAAAA,cAAc,EAAE;AAAEnB,IAAAA,IAAI,EAAEC;AAAR,GAlBlB;AAmBEmB,EAAAA,WAAW,EAAE;AAAEpB,IAAAA,IAAI,EAAEC;AAAR;AAnBf,CADkB,EAsBlB;AAAEoB,EAAAA,UAAU,EAAE;AAAd,CAtBkB,CAApB;AAyBAvB,WAAW,CAACwB,KAAZ,CACE;AAAEC,EAAAA,QAAQ,EAAE,UAAZ;AAAwBC,EAAAA,IAAI,EAAE,MAA9B;AAAsCC,EAAAA,OAAO,EAAE,MAA/C;AAAuDC,EAAAA,WAAW,EAAE;AAApE,CADF,EAEE;AAAEC,EAAAA,OAAO,EAAE;AAAEH,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,OAAO,EAAE,CAApB;AAAuBC,IAAAA,WAAW,EAAE;AAApC;AAAX,CAFF;AAKAE,MAAM,CAACC,OAAP,GACElC,QAAQ,CAACmC,MAAT,CAAgBC,MAAhB,IAA0BpC,QAAQ,CAACqC,KAAT,CAAe,QAAf,EAAyBlC,WAAzB,CAD5B","sourcesContent":["const mongoose = require(\"mongoose\");\nconst Schema = mongoose.Schema;\n\nconst OrderScehma = new Schema(\n  {\n    sessionId: { type: String },\n    clientProductObj: { type: Object },\n    imageObj: { type: Object },\n\n    payer_name: { type: String },\n    payer_address: { type: String },\n    payer_zip_code: { type: String },\n    payer_email: { type: String },\n    delivery_address_obj: { type: Object },\n    delivery_name: { type: String },\n    delivery_address: { type: String },\n    delivery_zip_code: { type: String },\n    map_url: { type: String },\n    map_image_obj: { type: Object },\n    map_width: { type: Number },\n    map_height: { type: Number },\n    price: { type: Number },\n    idempotencyKey: { type: String },\n    order_state: { type: String },\n  },\n  { timestamps: true }\n);\n\nOrderScehma.index(\n  { geometry: \"2dsphere\", name: \"text\", address: \"text\", description: \"text\" },\n  { weights: { name: 2, address: 1, description: 1 } }\n);\n\nmodule.exports =\n  mongoose.models.orders || mongoose.model(\"orders\", OrderScehma);\n"]},"metadata":{},"sourceType":"script"}