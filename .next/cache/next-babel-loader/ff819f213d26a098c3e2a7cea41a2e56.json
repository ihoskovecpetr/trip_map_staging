{"ast":null,"code":"const uuid = require(\"uuid\");\n\nconst mongoose = require(\"mongoose\");\n\nconst axios = require(\"axios\");\n\nconst lookup = require(\"country-code-lookup\");\n\nconst Order = require(\"../../mongoModels/order.js\");\n\nconst {\n  getIsProduction\n} = require(\"../../Lib/getIsProduction\");\n\nconst IS_PRODUCTION = getIsProduction();\nconst API_KEY = IS_PRODUCTION ? process.env.STRIPE_API_KEY : process.env.STRIPE_API_KEY_TEST;\n\nconst stripe = require(\"stripe\")(API_KEY);\n\nconst connectToMongoose = async () => {\n  try {\n    console.log({\n      MongoX: process.env.MONGO_user,\n      c: process.env.MONGO_password,\n      d: process.env.MONGO_DB_NAME\n    });\n    const data = await mongoose.connect(`mongodb+srv://${process.env.MONGO_user}:${process.env.MONGO_password}@cluster0.krtpb.mongodb.net/${process.env.MONGO_DB_NAME}?retryWrites=true&w=majority`, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    console.log(\"✅ Connected to DB\");\n    return data;\n  } catch (err) {\n    console.error(\"❌ could not connect to DB \", {\n      err\n    });\n    throw err;\n  }\n};\n\nconst test_shipping_code = [\"shr_1Ip7NWKQWovk2rIhdfYl73aq\"];\nconst test_shipping_code_czk = [\"shr_1IqgqIKQWovk2rIhCDcikEM0\"];\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      try {\n        console.log(\"Hitting stripe-checkout, await MONGO connection\");\n        await connectToMongoose();\n        console.log(\"✅ mongo connected \");\n        const {\n          product: clientProduct,\n          token,\n          imageObj\n        } = req.body;\n        console.log({\n          imageObj\n        });\n        const product = await stripe.products.create({\n          name: clientProduct.name,\n          images: [imageObj.url]\n        });\n        const price = await stripe.prices.create({\n          unit_amount: clientProduct.price * 100,\n          //TODO big.js\n          currency: \"czk\",\n          product: product.id\n        });\n        const SHIPPING_RATE_CODE = IS_PRODUCTION ? [clientProduct.shippingCode] : test_shipping_code_czk;\n        const BASE_DOMAIN = IS_PRODUCTION ? \"http://www.tripmap.shop\" : \"http://localhost:3000\";\n        console.log({\n          SHIPPING_RATE_CODE\n        });\n        const session = await stripe.checkout.sessions.create({\n          cancel_url: BASE_DOMAIN + \"/studio\",\n          //TODO get local address for redirect\n          success_url: BASE_DOMAIN + \"/api/checkout-to-printful?id={CHECKOUT_SESSION_ID}\",\n          //TODO get local address for redirect\n          locale: \"cs\",\n          metadata: {},\n          mode: \"payment\",\n          payment_method_options: {},\n          payment_method_types: [\"card\"],\n          shipping_rates: SHIPPING_RATE_CODE,\n          shipping_address_collection: {\n            allowed_countries: [\"CZ\", \"PL\", \"DE\"]\n          },\n          line_items: [{\n            price: price.id,\n            quantity: 1\n          }]\n        } // {\n        //   idempotencyKey,\n        // }\n        );\n        console.log({\n          session\n        });\n        const newOrder = new Order({\n          sessionId: session.id,\n          clientProductObj: clientProduct,\n          imageObj: imageObj\n        });\n        const savedOrderMongo = await newOrder.save();\n        console.log({\n          savedOrderMongo\n        });\n        return res.json({\n          id: session.id\n        });\n      } catch (error) {\n        console.error(\"Error:\", error);\n        res.status(402);\n        res.json({\n          error\n        });\n      }\n\n      break;\n\n    default:\n      res.status(405).end(); //Method Not Allowed\n\n      break;\n  }\n});","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/trip_map_staging/src/pages/api/stripe-checkout.js"],"names":["uuid","require","mongoose","axios","lookup","Order","getIsProduction","IS_PRODUCTION","API_KEY","process","env","STRIPE_API_KEY","STRIPE_API_KEY_TEST","stripe","connectToMongoose","console","log","MongoX","MONGO_user","c","MONGO_password","d","MONGO_DB_NAME","data","connect","useNewUrlParser","useUnifiedTopology","err","error","test_shipping_code","test_shipping_code_czk","req","res","method","product","clientProduct","token","imageObj","body","products","create","name","images","url","price","prices","unit_amount","currency","id","SHIPPING_RATE_CODE","shippingCode","BASE_DOMAIN","session","checkout","sessions","cancel_url","success_url","locale","metadata","mode","payment_method_options","payment_method_types","shipping_rates","shipping_address_collection","allowed_countries","line_items","quantity","newOrder","sessionId","clientProductObj","savedOrderMongo","save","json","status","end"],"mappings":"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","sourcesContent":["const uuid = require(\"uuid\");\nconst mongoose = require(\"mongoose\");\nconst axios = require(\"axios\");\nconst lookup = require(\"country-code-lookup\");\n\nconst Order = require(\"../../mongoModels/order.js\");\nconst { getIsProduction } = require(\"../../Lib/getIsProduction\");\n\nconst IS_PRODUCTION = getIsProduction();\n\nconst API_KEY = IS_PRODUCTION\n  ? process.env.STRIPE_API_KEY\n  : process.env.STRIPE_API_KEY_TEST;\n\nconst stripe = require(\"stripe\")(API_KEY);\n\nconst connectToMongoose = async () => {\n  try {\n    console.log({\n      MongoX: process.env.MONGO_user,\n      c: process.env.MONGO_password,\n      d: process.env.MONGO_DB_NAME,\n    });\n    const data = await mongoose.connect(\n      `mongodb+srv://${process.env.MONGO_user}:${process.env.MONGO_password}@cluster0.krtpb.mongodb.net/${process.env.MONGO_DB_NAME}?retryWrites=true&w=majority`,\n      { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    console.log(\"✅ Connected to DB\");\n    return data;\n  } catch (err) {\n    console.error(\"❌ could not connect to DB \", { err });\n    throw err;\n  }\n};\n\nconst test_shipping_code = [\"shr_1Ip7NWKQWovk2rIhdfYl73aq\"];\nconst test_shipping_code_czk = [\"shr_1IqgqIKQWovk2rIhCDcikEM0\"];\n\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      try {\n        console.log(\"Hitting stripe-checkout, await MONGO connection\");\n\n        await connectToMongoose();\n\n        console.log(\"✅ mongo connected \");\n\n        const { product: clientProduct, token, imageObj } = req.body;\n\n        console.log({ imageObj });\n\n        const product = await stripe.products.create({\n          name: clientProduct.name,\n          images: [imageObj.url],\n        });\n\n        const price = await stripe.prices.create({\n          unit_amount: clientProduct.price * 100, //TODO big.js\n          currency: \"czk\",\n          product: product.id,\n        });\n\n        const SHIPPING_RATE_CODE = IS_PRODUCTION\n          ? [clientProduct.shippingCode]\n          : test_shipping_code_czk;\n\n        const BASE_DOMAIN = IS_PRODUCTION\n          ? \"http://www.tripmap.shop\"\n          : \"http://localhost:3000\";\n\n        console.log({ SHIPPING_RATE_CODE });\n\n        const session = await stripe.checkout.sessions.create(\n          {\n            cancel_url: BASE_DOMAIN + \"/studio\", //TODO get local address for redirect\n            success_url:\n              BASE_DOMAIN +\n              \"/api/checkout-to-printful?id={CHECKOUT_SESSION_ID}\", //TODO get local address for redirect\n\n            locale: \"cs\",\n            metadata: {},\n            mode: \"payment\",\n            payment_method_options: {},\n            payment_method_types: [\"card\"],\n            shipping_rates: SHIPPING_RATE_CODE,\n            shipping_address_collection: {\n              allowed_countries: [\"CZ\", \"PL\", \"DE\"],\n            },\n\n            line_items: [\n              {\n                price: price.id,\n                quantity: 1,\n              },\n            ],\n          }\n          // {\n          //   idempotencyKey,\n          // }\n        );\n\n        console.log({ session });\n\n        const newOrder = new Order({\n          sessionId: session.id,\n          clientProductObj: clientProduct,\n          imageObj: imageObj,\n        });\n\n        const savedOrderMongo = await newOrder.save();\n\n        console.log({ savedOrderMongo });\n\n        return res.json({ id: session.id });\n      } catch (error) {\n        console.error(\"Error:\", error);\n        res.status(402);\n        res.json({ error });\n      }\n\n      break;\n    default:\n      res.status(405).end(); //Method Not Allowed\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}